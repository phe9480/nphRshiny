% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/f.alpha.R
\name{f.alpha}
\alias{f.alpha}
\title{Incremental Alpha for Group Sequential Design}
\usage{
f.alpha(
  overall.alpha = 0.025,
  sf = "LDOF",
  timing = c(0.75, 1),
  p1 = NULL,
  cum.alpha = NULL,
  param = -3
)
}
\arguments{
\item{overall.alpha}{Allocated overall alpha (one-sided) for group sequential design}

\item{sf}{Spending function. Acceptable types include: (1) LanDeMets O'Brien Fleming: "LDOF", (2) LanDeMets Pocock: "LDPK", (3) Hwang-Shih-DeCani: "HSD" with parameter param. (4) Haybittle-Peto: "Haybittle-Peto". (5) Bespoke: "Bespoke"}

\item{timing}{Information fractions of analyses, for example timing = c(0.6, 0.75, 1.0).}

\item{p1}{A fixed p value boundary for IAs (one-sided), which is applicable to Haybittle-Peto alpha spending only.}

\item{cum.alpha}{Cumulative alpha spending by analysis, which is applicable to Bespoke method only. Cum.alpha must have the same length as timing.}

\item{param}{parameter for Hwang-Shih-DeCani spending function}
}
\description{
The incremental alpha is the type I error allocated to a specific analysis while the sequential tests are negative for all previous analyses. Only one-sided type I error (alpha) is considered.
Specifically, incremental alpha_k = P(reject H0 at kth analysis while not rejecting H0 at all previous analyses)
}
\examples{
#Group sequential tests at information times 0.5, 0.7, 1.0 with overall alpha 0.025.

#(1) LD OBF spending
f.alpha(overall.alpha=0.025, sf="LDOF", timing=c(0.5, 0.7, 1.0))

#(2) LD Pocock spending
f.alpha(overall.alpha=0.025, sf="LDPK", timing=c(0.5, 0.7, 1.0))

#(3) Hwang-Shih-DeCani(-3)
f.alpha(overall.alpha=0.025, sf="HSD", timing=c(0.5, 0.7, 1.0), param=-3)

#(4) Haybittle-Peto with 0.0003 rejection boundaries at IAs
f.alpha(overall.alpha = 0.025, sf="Haybittle-Peto", timing = c(0.5, 0.7, 1), p1 = 0.0003)

#(5) Bespoke method with cumulative alpha spending as c(0.0003, 0.01, 0.025). In this method, the last element of cum.alpha must be equal to overall.alpha.
f.alpha(overall.alpha = 0.025, sf="Bespoke", timing = c(0.5, 0.7, 1), cum.alpha = c(0.0003, 0.01, 0.025))

}
