% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wlr.AHR.R
\name{wlr.AHR}
\alias{wlr.AHR}
\title{Expected Average Weighted Hazard Ratio Over Time}
\usage{
wlr.AHR(
  DCO = 24,
  r = 1,
  n = 450,
  h0 = function(t) {
     log(2)/12
 },
  S0 = function(t) {
     exp(-log(2)/12 * t)
 },
  h1 = function(t) {
     log(2)/12 * 0.7
 },
  S1 = function(t) {
     exp(-log(2)/12 * 0.7 * t)
 },
  f.logHR = function(t) {
     log(as.numeric(t < 6) + as.numeric(t >= 6) * 0.65)
 },
  rho = 0,
  gamma = 0,
  tau = NULL,
  s.tau = 0,
  f.ws = NULL,
  Lambda = function(t) {
     (t/18) * as.numeric(t <= 18) + as.numeric(t > 18)
 },
  G = function(t) {
     0
 }
)
}
\arguments{
\item{DCO}{Calendar times, calculated from first subject randomization date,
when the weighted log-rank test will be evaluated at the same calendar time.}

\item{r}{Randomization ratio of experimental arm : control arm as r:1. When r = 1, it is equal allocation. Default r = 1.}

\item{n}{Total sample size for two arms. Default is NULL.}

\item{h0}{Hazard function of control arm. h0(t) = log(2)/m0 means T~exponential distribution with median m0.}

\item{S0}{Survival function of control arm. In general, S0(t) = exp(- integral of h0(u) for u from 0 to t).
but providing S0(t) can improves computational efficiency and
usually the survival function is known in study design. The density function f0(t) = h0(t) * S0(t).}

\item{h1}{Hazard function of experimental arm. h1(t) = log(2)/m1 means T~exponential distribution with median m0.}

\item{S1}{Survival function of experimental arm. In general, S1(t) = exp(- integral of h1(u) for u from 0 to t).
but providing S1(t) can improves computational efficiency and
usually the survival function is known in study design. The density function f1(t) = h1(t) * S1(t).}

\item{rho}{Parameter for Fleming-Harrington (rho, gamma) weighted log-rank test.}

\item{gamma}{Parameter for Fleming-Harrington (rho, gamma) weighted log-rank test.
For log-rank test, set rho = gamma = 0.}

\item{tau}{Cut point for stabilized FH test, sFH(rho, gamma, tau); with weight
function defined as w(t) = s_tilda^rho*(1-s_tilda)^gamma, where
s_tilda = max(s(t), s.tau) or max(s(t), s(tau)) if s.tau = NULL
tau = Inf reduces to regular Fleming-Harrington test(rho, gamma)}

\item{s.tau}{Survival rate cut S(tau) at t = tau1; default 0.5, ie. cut at median.
s.tau = 0 reduces to regular Fleming-Harrington test(rho, gamma)}

\item{f.ws}{Self-defined weight function of survival rate.
For example, f.ws = function(s){1/max(s, 0.25)}
When f.ws is specified, the weight function takes them as priority.}

\item{Lambda}{Distribution function of enrollment. For uniform enrollment,
Lambda(t) = (t/A) where A is the enrollment period, i.e., Lambda(t) = t/A for 0<=t<=A, and
Lambda(t) = 1 when t > A. For more general non-uniform enrollment with weight psi,
Lambda(t) = (t/A)^psi*I(0<=t<=A) + I(t>A). Default Lambda is uniform distribution function.}

\item{G}{Distribution function of lost-to-follow-up censoring process. Default G = 0 (no lost-to-followup).
For 3 percent of drop off every 12 months, assuming exponential distribution (ie constant hazard), then G(t) = 1 - exp(-0.03/12*t).}
}
\value{
An object with dataframe below.
\itemize{
\item  AHR: Expected average HR (Geometric Schoenfeld)
\item  AHR2: Expected average HR (Geometric)
\item  AHR.KP Expected average HR (Kalbfleisch and Prentice)
\item  var.logHR: Asymptotic variance of the log expected average hazard ratio
\item  var.AHR: Asymptotic variance of the expected average hazard ratio using delta method
\item  var.AHR.KP: Asymptotic variance of the expected average hazard ratio of
Kalbfleisch and Prentice (1981) method using delta method
\item  wt: Weight function
}
}
\description{
This function calculates the expected average weighted HR under H1
evaluated at a time since 1st subject randomized. Three methods are implemented:
(1) Geometric Schoenfeld; (2) Kalbfleisch and Prentice (1981) method; (3) Geometric.
These methods are very close and the difference is usually negligible.
It's shown that the expected average weighted HR is approximately the weighted
average of piecewise HRs if the true HR(t) is piecewise under H1, where the weight
at each subinterval is the weighted probability of event at the subinterval
divided by the cumulative probability of event at a calendar time. For general form of H1 in terms
of HR(t), the expected average weighted HR is
the expectation of weighted hazard ratio function divided by the weighted cumulative
probability of event at a calendar time. For the special case of Cox
regression, the weight is 1, and the expected average hazard ratio reduces
to the expected hazard ratio function evaluated at the calendar time. For proportional hazards, it further reduces to
the constant hazard ratio under H1 regardless of weight functions.

This function allows flexible weight function as used in the weighted log-rank test. This
function also allows flexible alternative hypothesis in terms of HR(t), the
instaneous hazard ratio function over time. For delayed effect scenario under H1,
one can define HR(t) as a piecewise constant function of survival time t.
In addition, the function can handle user-defined flexible non-uniform enrollment
distribution function and independent time to lost-to-followup process which
is user-defined function of any lost-to-followup pattern such as constant
lost-to-followup rate or Weibull distribution. For most common setting
in practice, assuming the same lost-to-followup pattern in both arms.
If the total number of subjects n is not provided, the function returns
the non-centrality parameter of n^(-1/2)*Z where Z is the normalized
weighted log-rank test statistic Z = U/sqrt(var(U)) with U as the weighted
log-rank score statistic.
}
\examples{
#############
#Example (1) 
#############
#Trial scenario: 1:1 randomization, n = 450, enrollment follows non-uniform 
#enrollment distribution with weight 1.5 and enrollment period is 18 months. 
#Control arm ~ exponential distribution with median 12 months, and 
#Experimental arm ~ exponential distribution (Proportional Hazards) with median 12 / 0.7 months.
#Assuming no lost-to-followup. Find the expected number of events at calendar time 24 months, i.e.
#6 months after last patient randomized.

HR = 0.65; delay = 6; lambda0 = log(2) / 12; 
h0 = function(t){lambda0}; S0 = function(t){exp(-lambda0 * t)}
lambda1 = lambda0 * HR
f.logHR.PH = function(t){log(HR)}
h1.PH = function(t){lambda1}; S1.PH= function(t){exp(-lambda1 * t)}
Lambda = function(t){(t/18)^1.5*as.numeric(t <= 18) + as.numeric(t > 18)}
rho = 0; gamma = 0; tau = NULL; s.tau = 0; f.ws = NULL; G = function(t){0}
DCO = 24; r = 1; n = 450

wlr.AHR(DCO = 24, r = 1, n = 450, h0 = h0, S0=S0,
     h1 = h1.PH, S1=S1.PH, f.logHR = f.logHR.PH,
     rho = 0, gamma = 0, tau = NULL, s.tau = 0, f.ws = NULL,
     Lambda = Lambda, G = G)
     
#If proportional hazards, then the average HR is independent of any weight functions       
wlr.AHR(DCO = 24, r = 1, n = 450, h0 = h0, S0=S0,
     h1 = h1.PH, S1=S1.PH, f.logHR = f.logHR.PH,
     rho = 0, gamma = 1, tau = NULL, s.tau = 0, f.ws = NULL,
     Lambda = Lambda, G = G)
     
#############      
#Example (2) 
#############
#Same trial set up as example (1) but assuming delayed effect for 
#experimental arm. The delayed period is assumed 6 months, and after delay the
#hazard ratio is assumed 0.65.

HR = 0.65; delay = 6; lambda0 = log(2) / 12; 
h0 = function(t){lambda0}; S0 = function(t){exp(-lambda0 * t)}
h1.D6 = function(t){lambda0*as.numeric(t < delay)+HR*lambda0*as.numeric(t >= delay)}
c = exp(-delay*lambda0*(1-HR)); 
S1.D6 = function(t){exp(-lambda0*t)*as.numeric(t<delay) + c*exp(-HR*lambda0*t)*as.numeric(t>=delay)}
f.logHR.D6 = function(t){log(as.numeric(t<6) + as.numeric(t>= 6)*HR)}
Lambda = function(t){(t/18)^1.5*as.numeric(t <= 18) + as.numeric(t > 18)}
G = function(t){0}

wlr.AHR(DCO = 24, r = 1, n = 450, h0 = h0, S0=S0,
     h1 = h1.D6, S1=S1.D6, f.logHR = f.logHR.D6,
     rho = 0, gamma = 0, tau = NULL, s.tau = 0, f.ws = NULL,
     Lambda = Lambda, G = G)
     
wlr.AHR(DCO = 24, r = 1, n = 450, h0 = h0, S0=S0,
     h1 = h1.D6, S1=S1.D6, f.logHR = f.logHR.D6,
     rho = 0, gamma = 1, tau = NULL, s.tau = 0, f.ws = NULL,
     Lambda = Lambda, G = G)
     
#############
#Example (3). 
#############
#Draw a plot of average weighted HR over time    
plot.AHR = function(f.logHR = f.logHR.PH, h0=h0, S0=S0, h1=h1, S1=S1, s.tau=0.5){
  maxT = 48; AHR.lr = AHR.fh = AHR.fh11 = AHR.sfh = rep(NA, maxT)
  for(i in 1:maxT){
    AHR.lr[i] = wlr.AHR(DCO = i, r = 1, n = 450, h0 = h0, S0=S0,
       h1 = h1, S1=S1, f.logHR = f.logHR,
       rho = 0, gamma = 0, tau = NULL, s.tau = 0, f.ws = NULL,
       Lambda = Lambda, G = G)$AHR
    AHR.fh[i] = wlr.AHR(DCO = i, r = 1, n = 450, h0 = h0, S0=S0,
       h1 = h1, S1=S1, f.logHR = f.logHR,
       rho = 0, gamma = 1, tau = NULL, s.tau = 0, f.ws = NULL,
       Lambda = Lambda, G = G)$AHR      
    AHR.sfh[i] = wlr.AHR(DCO = i, r = 1, n = 450, h0 = h0, S0=S0,
       h1 = h1, S1=S1, f.logHR = f.logHR,
       rho = 0, gamma = 1, tau = NULL, s.tau = s.tau, f.ws = NULL,
       Lambda = Lambda, G = G)$AHR    
    AHR.fh11[i] = wlr.AHR(DCO = i, r = 1, n = 450, h0 = h0, S0=S0,
       h1 = h1, S1=S1, f.logHR = f.logHR,
       rho = 1, gamma = 1, tau = NULL, s.tau = 0, f.ws = NULL,
       Lambda = Lambda, G = G)$AHR          
  }

  maxY = max(c(AHR.lr, AHR.fh, AHR.sfh))
  plot(1:maxT, AHR.lr, type="n", ylim=c(0.4, 1), 
  xlab="Months", ylab = "Average Weighted HR")   
  lines(1:maxT, AHR.lr, lty = 1, col=1)
  lines(1:maxT, AHR.fh, lty = 2, col=2)
  lines(1:maxT, AHR.sfh, lty = 3, col=3)
  lines(1:maxT, AHR.fh11, lty = 4, col=4)
  abline(h=0.8, col="gray", lty=2)
  
  legend(0, 0.65, c("Log-rank", "FH(0,1)", paste("sFH(0,1,",s.tau,")", sep=""),"FH(1,1)"), 
  col=1:4, lty=1:4, bty="n", cex=0.8)
}

#(a)Proportional Hazards
#########################
plot.AHR(f.logHR = f.logHR.PH, h0=h0, S0=S0, h1=h1.PH, S1=S1.PH)

#(b)Delayed effect of 6 months
#########################
plot.AHR(f.logHR = f.logHR.D6, h0=h0, S0=S0, h1=h1.D6, S1=S1.D6, s.tau=0.5)

#(c)Crossover to effective subsequent IO therapy and delay 6 months
#########################
crossDCO = 24; HRx = 0.9; #after crossover, assuming the tail piecewise HR = 0.9.
h0x = function(t){lambda0*as.numeric(t < crossT) + HR/HRx*lambda0*as.numeric(t >= crossT)}; 
c0 = exp(-crossT*lambda0*(1-HR/HRx)); 
S0x = function(t){exp(-lambda0*t)*as.numeric(t<crossT) + c0*exp(-HR/HRx*lambda0*t)*as.numeric(t>=crossT)}
h1.D6x = function(t){lambda0*as.numeric(t < delay) + HR*lambda0*as.numeric(t >= delay)}
c1 = exp(-delay*lambda0*(1-HR)); 
S1.D6x = function(t){exp(-lambda0*t)*as.numeric(t<delay) + c1*exp(-HR*lambda0*t)*as.numeric(t>=delay)}
f.logHR.D6x = function(t){log(as.numeric(t < delay) 
+ as.numeric(t >= delay & t < crossT)*HR + as.numeric(t >= crossT)*HRx)}

plot.AHR(f.logHR = f.logHR.D6x, h0=h0x, S0=S0x, h1=h1.D6x, S1=S1.D6x, s.tau=0.5)

#############
#Example (4)
#Delayed effect 6 mo
#############
HRseq = seq(0.1, 0.9, by=0.01); L = length(HRseq)
AHR.lr = AHR.KP.lr = AHR.fh = AHR.KP.fh = rep(NA, L)
for (i in 1:L){
  HR = HRseq[i]
  h0 = function(t){lambda0}; S0 = function(t){exp(-lambda0 * t)}
  h1.D6 = function(t){lambda0*as.numeric(t < delay)+HR*lambda0*as.numeric(t >= delay)}
  c = exp(-delay*lambda0*(1-HR)); 
  S1.D6 = function(t){exp(-lambda0*t)*as.numeric(t<delay) + c*exp(-HR*lambda0*t)*as.numeric(t>=delay)}
  f.logHR.D6 = function(t){log(as.numeric(t<6) + as.numeric(t>= 6)*HR)}
  
  lr = wlr.AHR(DCO = 48, r = 1, n = 450, h0 = h0, S0=S0,
       h1 = h1.D6, S1=S1.D6, f.logHR = f.logHR.D6,
       rho = 0, gamma = 0, tau = NULL, s.tau = 0, f.ws = NULL,
       Lambda = Lambda, G = G)
  fh = wlr.AHR(DCO = 48, r = 1, n = 450, h0 = h0, S0=S0,
       h1 = h1.D6, S1=S1.D6, f.logHR = f.logHR.D6,
       rho = 0, gamma = 1, tau = NULL, s.tau = 0, f.ws = NULL,
       Lambda = Lambda, G = G)
  AHR.lr[i] = lr$AHR; AHR.KP.lr[i] = lr$AHR.KP
  AHR.fh[i] = fh$AHR; AHR.KP.fh[i] = fh$AHR.KP
}
  plot(HRseq, AHR.lr, type="n", ylim=c(0, 1), 
  xlab="Hazard Ratio", ylab = "Average Weighted HR")   
  lines(HRseq, AHR.lr, lty = 1, col=1)
  lines(HRseq, AHR.KP.lr, lty = 2, col=2)
  
  lines(HRseq, AHR.fh, lty = 3, col=3)
  lines(HRseq, AHR.KP.fh, lty = 4, col=4)
  
  legend(0.6, 0.5, c("Log-rank: AHR", "Log-rank: AHR(KP)", "FH01: AHR", "FH01: AHR(KP)"), 
  col=1:4, lty=1:4, bty="n", cex=0.7)
####################
#Example (5)
####################
HRseq = seq(0.1, 0.9, by=0.01); L = length(HRseq)
AHR.lr = AHR.KP.lr = AHR.fh = AHR.KP.fh = rep(NA, L)
for (i in 1:L){
  HR = HRseq[i]
  lambda1 = lambda0 * HR
  f.logHR.PH = function(t){log(HR)}
  h1.PH = function(t){lambda1}; 
  S1.PH= function(t){exp(-lambda1 * t)}
  
  lr = wlr.AHR(DCO = 48, r = 1, n = 450, h0 = h0, S0=S0,
       h1 = h1.PH, S1=S1.PH, f.logHR = f.logHR.PH,
       rho = 0, gamma = 0, tau = NULL, s.tau = 0, f.ws = NULL,
       Lambda = Lambda, G = G)
  fh = wlr.AHR(DCO = 48, r = 1, n = 450, h0 = h0, S0=S0,
       h1 = h1.PH, S1=S1.PH, f.logHR = f.logHR.PH,
       rho = 0, gamma = 1, tau = NULL, s.tau = 0, f.ws = NULL,
       Lambda = Lambda, G = G)
  AHR.lr[i] = lr$AHR; AHR.KP.lr[i] = lr$AHR.KP
  AHR.fh[i] = fh$AHR; AHR.KP.fh[i] = fh$AHR.KP
}
  plot(HRseq, AHR.lr, type="n", ylim=c(0, 1), 
  xlab="Hazard Ratio", ylab = "Average Weighted HR")   
  lines(HRseq, AHR.lr, lty = 1, col=1)
  lines(HRseq, AHR.KP.lr, lty = 2, col=2)
  
  lines(HRseq, AHR.fh, lty = 3, col=3)
  lines(HRseq, AHR.KP.fh, lty = 4, col=4)
  
  legend(0.6, 0.5, c("Log-rank: AHR", "Log-rank: AHR(KP)", "FH01: AHR", "FH01: AHR(KP)"), 
  col=1:4, lty=1:4, bty="n", cex=0.7)

####################
#Example (6)
#Comparison of KP method and (He et al) method 
#Crossover to subsequent therapy
####################
HRseq = seq(0.1, 0.9, by=0.01); L = length(HRseq)
AHR.lr = AHR.KP.lr = AHR.fh = AHR.KP.fh = rep(NA, L)
crossT = 30; HRx = 0.9; #after crossover, assuming the tail piecewise HR = 0.9.
for (i in 1:L){
  HR = HRseq[i]
  lambda1 = lambda0 * HR
  h0x = function(t){lambda0*as.numeric(t < crossT) + HR/HRx*lambda0*as.numeric(t >= crossT)}; 
  c0 = exp(-crossT*lambda0*(1-HR/HRx)); 
  S0x = function(t){exp(-lambda0*t)*as.numeric(t<crossT) + c0*exp(-HR/HRx*lambda0*t)*as.numeric(t>=crossT)}
  h1.D6x = function(t){lambda0*as.numeric(t < delay) + HR*lambda0*as.numeric(t >= delay)}
  c1 = exp(-delay*lambda0*(1-HR)); 
  S1.D6x = function(t){exp(-lambda0*t)*as.numeric(t<delay) + c1*exp(-HR*lambda0*t)*as.numeric(t>=delay)}
  f.logHR.D6x = function(t){log(as.numeric(t < delay) 
    + as.numeric(t >= delay & t < crossT)*HR + as.numeric(t >= crossT)*HRx)}
  lr = wlr.AHR(DCO = 48, r = 1, n = 450, h0 = h0x, S0=S0x,
       h1 = h1.D6x, S1=S1.D6x, f.logHR = f.logHR.D6x,
       rho = 0, gamma = 0, tau = NULL, s.tau = 0, f.ws = NULL,
       Lambda = Lambda, G = G)
  fh = wlr.AHR(DCO = 48, r = 1, n = 450, h0 = h0x, S0=S0x,
       h1 = h1.D6x, S1=S1.D6x, f.logHR = f.logHR.D6x,
       rho = 0, gamma = 1, tau = NULL, s.tau = 0, f.ws = NULL,
       Lambda = Lambda, G = G)
  AHR.lr[i] = lr$AHR; AHR.KP.lr[i] = lr$AHR.KP
  AHR.fh[i] = fh$AHR; AHR.KP.fh[i] = fh$AHR.KP
}
  plot(HRseq, AHR.lr, type="n", ylim=c(0, 1), 
  xlab="Hazard Ratio", ylab = "Average Weighted HR")   
  lines(HRseq, AHR.lr, lty = 1, col=1)
  lines(HRseq, AHR.KP.lr, lty = 2, col=2)
  
  lines(HRseq, AHR.fh, lty = 3, col=3)
  lines(HRseq, AHR.KP.fh, lty = 4, col=4)
  
  legend(0.5, 0.5, c("Log-rank: AHR", "Log-rank: AHR(KP)", "FH01: AHR", "FH01: AHR(KP)"), 
  col=1:4, lty=1:4, bty="n", cex=0.7)

}
